{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shinhaeran/Desktop/supporting_measurment/react/lion-app/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport React from \"react\"; // 컴포넌트\n//{{}} 첫번째 중괄호: js코드가 들어갈 거여 두번째 중괄호 : js오브젝트가 들어갈거여\n\n/*\njsx ->html 태그\njsx ->style을 통해 css(jsx)\njsx ->className을 통해 css (css->A.css)\n*/\n\nconst myStyle = {\n  color: 'red',\n  fontWeight: 700\n}; // function WorldClock(props){\n//   return( //무조건 return() 안에 div하나만 있어야함, 👇\"\" 스트링 하나일때는 {}생략해도 됨\n//     <div className={\"worldClock\"}>  \n//       <h2>🌈도시:{props.city}</h2>\n//       <p>🥳시간:{props.time}시</p>\n//     </div>\n//   )\n// }\n\nclass WorldClock extends React.Component {\n  constructor(props) {\n    super(props); //react.component의 input\n\n    this.handlingClick = event => {\n      //handlingClick은 왠만하면 arrow func으로 작성해주는게 좋다\u001c\n      console.log(event.target, event.target.value, this.state.stop); //<button>​멈추기​</button>​   \"true\"\n      // this.setState({stop: event.target.value})\n\n      this.setState({\n        stop: !this.state.stop\n      });\n\n      if (!this.state.stop) {\n        clearInterval(this.timer);\n      } else {\n        console.log(this.timer); //-> interval 횟수라는디..\n\n        this.a();\n      } // console.log(tr)\n\n    };\n\n    this.state = {\n      //worldclock의 어떨때 state를 씀? -> 1.시간과 분이 변화하는 걸 보고 싶어 ! 2.그걸 동적으로 보고싶어!\n      hour: this.props.time,\n      minute: 0,\n      stop: false\n    };\n    console.log(\"  child 시작\");\n  }\n\n  componentDidMount() {\n    this.a(); // 이거를 constructor에 놓지말고 여기에 놓음\n\n    console.log(\"  child 마운트됨\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"  child 업데이트됨\");\n  }\n\n  a() {\n    this.timer = setInterval(() => {\n      this.setState(state => state.minute === 59 ? {\n        hour: state.hour + 1,\n        minute: 0\n      } : {\n        minute: state.minute + 1\n      });\n    }, 5000);\n  }\n\n  render() {\n    //미리 약속된 함수-> 여기있는걸 recat.componenet가 보내줄거야\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"worldClock\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"\\uD83C\\uDF08\\uB3C4\\uC2DC:\", this.props.city]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83E\\uDD73\\uC2DC\\uAC04:\", this.state.hour, \"\\uC2DC \", this.state.minute]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        value: true,\n        onClick: this.handlingClick,\n        children: \"\\uBA48\\uCD94\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handlingChange = event => {\n      this.setState({\n        content: event.target.value\n      });\n    };\n\n    this.handlingClick = event => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.cityTimeData = [['서울', 24], ['베이징', 9], ['시드니', 12]];\n    this.state = {\n      content: '',\n      donottouch: true\n    };\n    console.log(\"parent 시작\");\n  }\n\n  componentDidMount() {\n    console.log(\"parent 마운트됨\");\n  }\n\n  componentDidUpdate() {\n    console.log(\"parent 업데이트됨\");\n  }\n\n  render() {\n    console.log(\"parent 렌더링 시작\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: 'myStyle',\n        children: \"gkdlfn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'post',\n        children: [\"\\uCCAB \\uAC8C\\uC2DC\\uAE00\\uC785\\uB2C8\\uB2E4.\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: this.state.content,\n          onChange: this.handlingChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handlingClick,\n        children: \"\\uB204\\uB974\\uC9C0 \\uB9C8\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), this.state.donottouch && //donottouch state가 true일때만 child 컴포넌트가 보인다! 짱신기\n      this.cityTimeData.map((citytime, index) => /*#__PURE__*/_jsxDEV(WorldClock, {\n        city: citytime[0],\n        time: citytime[1]\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n\n} // function App() {\n//   const cityTimeData = [\n//     ['서울',24],\n//     ['베이징',9],\n//     ['시드니',12],\n//   ]\n//   const WorldClockList = cityTimeData.map((citytime,index)=>\n//     <WorldClock city={citytime[0]} time={citytime[1]} key={index}/>  \n//   )\n//   return (\n//     <div className=\"App\">\n//       {/* <h1 style={{color:'red'}}>gkdlfn</h1>  */}\n//       {/* <h1 style={myStyle}>gkdlfn</h1>  */}\n//       <h1 className=\"myStyle\">gkdlfn</h1> \n//       <div className={'post'}>\n//         첫 게시글입니다.\n//       </div>\n//       {/* <WorldClock city={'서울'} time={10}/>\n//       <WorldClock city={'서울'} time={10}/> */}\n//       {WorldClockList}\n//     </div>\n//   );\n// }\n//컴포넌트를 export 해줌(index.js에서 Import함), default:이 파일(app.js)은 기본적으로 이거 하나만 export하겠다~ , 다른 컴포넌트는 export x\n//여기서 App이라는 이름으로 export해줘도 import aa라고 해도 잘 되긴 된당. 어차피 똑같은거여\n\n\nexport default App;\n/*\nprops: 역과 역 사이에 데이터를 이동하는 수단 ->데이터를 key:value형태로 전달해줌 -> ReadOnly이다!\nWarning: Each child in a list should have a unique \"key\" prop.\n-> workldClock의 props : city, time들의 unique key prop을 추가하란 뜻->보통 index로하지만 유니크하기만 하면 되므로 걍 city로 해도 오류는 나지 않는다\nmap : iterator한 어떤거의 인덱스 -> index\n-> react는 최고의 가성비를 위해 변화가 일어난 최소 부분만 빨리 감지하기 위해 각 element의 unique key가 필요하다\n참고 : https://reactjs.org/docs/lists-and-keys.html#keys\n*/\n\n/*\nstate : 컴포넌트의 상태를 나타냄 -> 이것만으로 폼이 많이 드므로 최소한 가성비 있게 써야 한다\n1.Props만으로 표현할 수 있는가 2. render로 표시되지 않는 값인가 -> 2개가 해당되지 않는다면 state로!\nfucntion component : state를 사용 못함 -> 쓰려면 class componenet로 써야함(class가 더 코드가 많고 큼) =>이었는데 hook으로 function컴포넌트로 state 사용 가능하다!!\n\n\nprops나 state의 값이 바뀌면 그 컴포넌트의 render함수가 다시 호출된다.\nrender함수가 가지고 있는 하위의 컴포넌트들의 각 render함수도 다시 호출된다.\n즉 props나 state의 값이 바뀌면 화면이 다시 그려진다. 오잉 뭐지\n*/\n\n/*event handling 맹글기\n1. 필요한 state를 만든다\n\n/*\nlifecycle 순서: constructor->render->mount->re-render->update->unmount\nparent 시작 -> parent :constructor\nparent 렌더링 시작 -> parent :render\n  child 시작 -> child : constructor,render\n  child 마운트됨 ->child : mount -> componentDidMount()\n  parent 마운트됨 -> parent : mount -> componentDidMount()\n  \nupdate는 언제 되느냐? -> state와 prop이 변할 때\n\nparent 시작\nparent 렌더링 시작\n   child 시작\n   child 마운트됨\nparent 마운트됨\n   child 업데이트됨 -> re-render하고 update -> componentDidUpdate\nparent 렌더링 시작 -> 부모의 update 시, 모든 자식들 컴포넌트들 re-render, update해줌\n   child 업데이트됨\nparent 업데이트됨\n\n->부모 업데이트마다 모든 자식들 렌더,업데이트 다 해줘야 하는게 너무 비효율적이다\n부모 업데이트 해도 자식들 업데이트x->shouldComponent(모든 업데이트 마다 커스텀 가능), pureComponent(미리 알아서 제공해주는 기능들이 많당)\n*/","map":{"version":3,"sources":["/Users/shinhaeran/Desktop/supporting_measurment/react/lion-app/src/App.js"],"names":["React","myStyle","color","fontWeight","WorldClock","Component","constructor","props","handlingClick","event","console","log","target","value","state","stop","setState","clearInterval","timer","a","hour","time","minute","componentDidMount","componentDidUpdate","setInterval","render","city","App","handlingChange","content","show","cityTimeData","donottouch","map","citytime","index"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport React from \"react\";\n// 컴포넌트\n//{{}} 첫번째 중괄호: js코드가 들어갈 거여 두번째 중괄호 : js오브젝트가 들어갈거여\n\n/*\njsx ->html 태그\njsx ->style을 통해 css(jsx)\njsx ->className을 통해 css (css->A.css)\n*/\nconst myStyle = {\n  color:'red',\n  fontWeight:700,}\n\n// function WorldClock(props){\n//   return( //무조건 return() 안에 div하나만 있어야함, 👇\"\" 스트링 하나일때는 {}생략해도 됨\n//     <div className={\"worldClock\"}>  \n//       <h2>🌈도시:{props.city}</h2>\n//       <p>🥳시간:{props.time}시</p>\n//     </div>\n//   )\n// }\n\nclass WorldClock extends React.Component{\n  constructor(props){\n    super(props) //react.component의 input\n    this.state = { //worldclock의 어떨때 state를 씀? -> 1.시간과 분이 변화하는 걸 보고 싶어 ! 2.그걸 동적으로 보고싶어!\n      hour : this.props.time,\n      minute:0,\n      stop:false,\n    }\n    console.log(\"  child 시작\")\n  }\n  componentDidMount(){\n    this.a() // 이거를 constructor에 놓지말고 여기에 놓음\n    console.log(\"  child 마운트됨\")\n  }\n\n  componentDidUpdate(){\n    console.log(\"  child 업데이트됨\")\n  }\n  a(){\n    this.timer = setInterval(() => {\n      this.setState((state)=>(\n        \n        state.minute === 59\n        ?{hour : state.hour+1,minute:0}\n        :{minute:state.minute+1}\n      ))\n    }, 5000)\n  }\n\n  handlingClick = (event) => { //handlingClick은 왠만하면 arrow func으로 작성해주는게 좋다\u001c\n    console.log(event.target, event.target.value,this.state.stop) //<button>​멈추기​</button>​   \"true\"\n    // this.setState({stop: event.target.value})\n    this.setState({stop:!this.state.stop})\n    if (!this.state.stop){\n      clearInterval(this.timer)\n    }\n    else{\n      console.log(this.timer) //-> interval 횟수라는디..\n      this.a()\n    }\n    // console.log(tr)\n  }\n\n  render(){ //미리 약속된 함수-> 여기있는걸 recat.componenet가 보내줄거야\n   return(\n    <div className={\"worldClock\"}>  \n    <h2>🌈도시:{this.props.city}</h2>\n    <p>🥳시간:{this.state.hour}시 {this.state.minute}</p>\n    <button value={true} onClick={this.handlingClick}>멈추기</button>\n  </div>\n   )\n  }\n}\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.cityTimeData = [\n      ['서울',24],\n      ['베이징',9],\n      ['시드니',12],\n    ]\n    this.state = {\n      content:'',\n      donottouch:true\n    }\n    console.log(\"parent 시작\")\n  }\n  componentDidMount(){\n    console.log(\"parent 마운트됨\")\n  }\n  componentDidUpdate(){\n    console.log(\"parent 업데이트됨\")\n  }\n\n  handlingChange = (event)=>{\n    this.setState({content:event.target.value})\n  }\n  handlingClick = (event)=>{\n    this.setState({show:false})\n  }\n  \n\n  render(){\n    console.log(\"parent 렌더링 시작\")\n    return (\n      <div className=\"App\">\n        <h1 className={'myStyle'}>gkdlfn</h1> \n        <div className={'post'}>\n          첫 게시글입니다.\n          <textarea value={this.state.content} onChange={this.handlingChange}></textarea>\n        </div>\n        <button onClick={this.handlingClick}>누르지 마세요</button>\n        {this.state.donottouch&&  //donottouch state가 true일때만 child 컴포넌트가 보인다! 짱신기\n        this.cityTimeData.map((citytime,index)=>\n          <WorldClock city={citytime[0]} time={citytime[1]} key={index}/>  \n        )}\n      </div>\n    );\n  }\n  \n}\n// function App() {\n//   const cityTimeData = [\n//     ['서울',24],\n//     ['베이징',9],\n//     ['시드니',12],\n//   ]\n\n//   const WorldClockList = cityTimeData.map((citytime,index)=>\n//     <WorldClock city={citytime[0]} time={citytime[1]} key={index}/>  \n//   )\n//   return (\n//     <div className=\"App\">\n//       {/* <h1 style={{color:'red'}}>gkdlfn</h1>  */}\n//       {/* <h1 style={myStyle}>gkdlfn</h1>  */}\n//       <h1 className=\"myStyle\">gkdlfn</h1> \n//       <div className={'post'}>\n//         첫 게시글입니다.\n//       </div>\n//       {/* <WorldClock city={'서울'} time={10}/>\n//       <WorldClock city={'서울'} time={10}/> */}\n//       {WorldClockList}\n//     </div>\n//   );\n// }\n//컴포넌트를 export 해줌(index.js에서 Import함), default:이 파일(app.js)은 기본적으로 이거 하나만 export하겠다~ , 다른 컴포넌트는 export x\n//여기서 App이라는 이름으로 export해줘도 import aa라고 해도 잘 되긴 된당. 어차피 똑같은거여\nexport default App;\n\n\n/*\nprops: 역과 역 사이에 데이터를 이동하는 수단 ->데이터를 key:value형태로 전달해줌 -> ReadOnly이다!\nWarning: Each child in a list should have a unique \"key\" prop.\n-> workldClock의 props : city, time들의 unique key prop을 추가하란 뜻->보통 index로하지만 유니크하기만 하면 되므로 걍 city로 해도 오류는 나지 않는다\nmap : iterator한 어떤거의 인덱스 -> index\n-> react는 최고의 가성비를 위해 변화가 일어난 최소 부분만 빨리 감지하기 위해 각 element의 unique key가 필요하다\n참고 : https://reactjs.org/docs/lists-and-keys.html#keys\n*/\n\n/*\nstate : 컴포넌트의 상태를 나타냄 -> 이것만으로 폼이 많이 드므로 최소한 가성비 있게 써야 한다\n1.Props만으로 표현할 수 있는가 2. render로 표시되지 않는 값인가 -> 2개가 해당되지 않는다면 state로!\nfucntion component : state를 사용 못함 -> 쓰려면 class componenet로 써야함(class가 더 코드가 많고 큼) =>이었는데 hook으로 function컴포넌트로 state 사용 가능하다!!\n\n\nprops나 state의 값이 바뀌면 그 컴포넌트의 render함수가 다시 호출된다.\nrender함수가 가지고 있는 하위의 컴포넌트들의 각 render함수도 다시 호출된다.\n즉 props나 state의 값이 바뀌면 화면이 다시 그려진다. 오잉 뭐지\n*/\n\n/*event handling 맹글기\n1. 필요한 state를 만든다\n\n/*\nlifecycle 순서: constructor->render->mount->re-render->update->unmount\nparent 시작 -> parent :constructor\nparent 렌더링 시작 -> parent :render\n  child 시작 -> child : constructor,render\n  child 마운트됨 ->child : mount -> componentDidMount()\n  parent 마운트됨 -> parent : mount -> componentDidMount()\n  \nupdate는 언제 되느냐? -> state와 prop이 변할 때\n\nparent 시작\nparent 렌더링 시작\n   child 시작\n   child 마운트됨\nparent 마운트됨\n   child 업데이트됨 -> re-render하고 update -> componentDidUpdate\nparent 렌더링 시작 -> 부모의 update 시, 모든 자식들 컴포넌트들 re-render, update해줌\n   child 업데이트됨\nparent 업데이트됨\n\n->부모 업데이트마다 모든 자식들 렌더,업데이트 다 해줘야 하는게 너무 비효율적이다\n부모 업데이트 해도 자식들 업데이트x->shouldComponent(모든 업데이트 마다 커스텀 가능), pureComponent(미리 알아서 제공해주는 기능들이 많당)\n*/\n"]},"metadata":{},"sourceType":"module"}